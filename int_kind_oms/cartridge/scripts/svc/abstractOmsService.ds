/**
 * Abstract service class for all socket payments
 */
 /* API includes */
var omsLogger  = require('dw/system/Logger').getLogger('SalesforceOMS', 'service');
var HashMap     = require('dw/util/HashMap');
var Site        = require('dw/system/Site').getCurrent();

// Script includes
var HTTPBaseService = require( './httpBaseService' );

// Module level declarations
var logPrefix = 'OMS - AbstractOMSService.ds:\n';

var AbstractOMSService = HTTPBaseService.extend(
{
    init : function() {
        this._super( this.getSitePreference("oms.svc.name") );
        this.requestMethod = 'POST';
        // set encoding to UTF-8 as default
        this.encoding = this.encoding || 'UTF-8';
        //without authentication
        this.authentication = 'NONE';
        //oms api version
        this.version = this.getSitePreference("oms.api.version");
        // request header
        this.requestHeaders = {
            'Content-type': 'application/json'
        };
    },

    /**
    * Implements the function that should be used to prepare the service call request objects
    *
    * @param {dw.svc.HTTPService}    svc       The service itself
    * @param {dw.util.Map}           params    Map of key value pairs that have to be added as parameters to the call
    *
    * @return String The string that has to be sent to the service
    */
    createRequest : function( svc, params) {

        //sets the service call endpoint
        if ( !empty(this.relativeURLPath) ) {
            svc.URL = [ svc.URL, this.relativeURLPath ].join('');
        }

        //adding header values
        if ( !empty(this.requestHeaders) ) {
            for ( var headerID in this.requestHeaders ) {
                svc.addHeader(headerID, this.requestHeaders[headerID]);
            }
        }

        //setting request encoding
        if ( !empty(this.encoding) && this.encoding != 'UTF-8') {
            svc.setEncoding(this.encoding);
        }

        //setting the authentication mechanism which is default NONE
        svc.setRequestMethod('NONE');

        //setting request method
        svc.setRequestMethod('POST');

        // log used service url for debugging purposes
        omsLogger.info(logPrefix + 'Called service: ' + svc.URL );

        //setting the out file if defined
        if ( !empty(this.outfile) ) {
            svc.setOutFile(this.outfile);
        }

        return this;
    },

    /**
    * Helper function to retrieve specific config value
    *
    * @return String
    */
    getSitePreference: function ( key ) {
        var result = null;
        result = Site.getCustomPreferenceValue(key);
        if ( empty(result) ) {
            result = '';
        }
        return result;
    }
});
//Export the configured service singleton
module.exports = AbstractOMSService;
